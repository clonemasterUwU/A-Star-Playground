{"version":3,"sources":["components/Playground/Node.jsx","algorithms/PriorityQueue.js","algorithms/Astar.js","algorithms/Neighbor.js","algorithms/Dijkstra.js","components/Playground/Board.jsx","components/Playground/Tooltip.jsx","components/Playground/Playground.jsx","components/Chapter0/Screen00.jsx","components/Navigation/Backward.jsx","components/Navigation/Forward.jsx","components/Chapter0/Screen01.jsx","components/Chapter0/Screen02.jsx","components/Chapter0/Chapter0.jsx","components/Chapter1/Screen10.jsx","components/Playground/Dijkstra.jsx","components/Chapter1/Screen11.jsx","components/Chapter1/Screen12.jsx","components/Chapter1/Chapter1.jsx","components/Navigation/Navigation.jsx","components/Main.jsx","fonts/FuturaHandwritten.ttf","fonts/fonts.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","onRightClick","nodeInfo","row","col","status","weight","isPath","f","onMouseUp","onMouseDown","onMouseEnter","StyleNode","onContextMenu","event","styled","td","parent","i","left","right","PriorityQueue","comparator","a","b","this","_heap","_comparator","length","size","values","forEach","value","push","_siftUp","poppedValue","peek","bottom","_swap","pop","_siftDown","replacedValue","j","node","_greater","maxChild","pathTo","curr","path","unshift","_reset","board","start","end","g","h","isWall","visited","closed","r","c","mahattan","Math","abs","d4","square4","res","dr","dc","search","neighbor","pq","newBoard","slice","current","Board","boardSize","heuristic","setStart","algorithm","useState","setBoard","mousePress","setMousePress","nodePress","setNodePress","useEffect","gridGenerator","defaultDijkstra","console","log","nextNode","aStarSearch","dijkstraSearch","rightClick","preventDefault","buttons","wallToggle","weightChange","moveSpecialNode","map","rid","className","nid","prevRow","prevCol","newRow","newCol","grid","nodeGenerator","oldNode","Tooltip","setBoardSize","setHeuristic","TooltipWrapper","Row","RowSlider","aria-label","max","min","marks","step","onChange","valueLabelDisplay","component","Button","variant","onClick","div","Slider","Playground","setAlgorithm","Wrapper","StyledBoard","Screen00","setChapterStage","IntroText","StyledButton","fontSize","h1","Forward","Text","BottomGrid","container","justify","direction","p","Grid","Chapter0","setStage","chapterStage","Screen10","Dikstra","Screen11","Chapter1","Navigation","stage","StyleDiv","StyledTooltip","title","Fab","color","Main","FontFormat","createGlobalStyle","FuturaHandwritten","theme","createMuiTheme","typography","button","textTransform","fontFamily","join","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86abde90.chunk.js","sourcesContent":["\r\nimport styled  from 'styled-components';\r\n\r\nexport default function Node(props){\r\n  const { onRightClick,nodeInfo:{row,col,status,weight,isPath,f}, onMouseUp, onMouseDown, onMouseEnter } = props;\r\nreturn(\r\n  <StyleNode\r\n    row={row}\r\n    col={col}\r\n    weight={weight}\r\n    status={status}\r\n    isPath={isPath}\r\n    onContextMenu = {(event)=>onRightClick(event,row,col)} \r\n    onMouseDown={(event)=>onMouseDown(event,row,col)}\r\n    onMouseUp={(event)=>onMouseUp(event,row,col)}\r\n    onMouseEnter={(event)=>onMouseEnter(event,row,col)}\r\n  >\r\n    {f===0?'':f}\r\n  </StyleNode>\r\n    \r\n)\r\n}\r\nconst StyleNode = styled.td`\r\n  width: 25px;\r\n  height: 25px;\r\n  border: 1px solid rgb(175, 216, 248);\r\n  font-size:13px;  \r\n  background-color: ${props=>props.status===1?`rgb(248, 131, 131)`\r\n                            :props.status===2?`rgb(129, 127, 252)`\r\n                            :props.isPath===true?`rgb(219, 241, 70)`\r\n                            :props.status===0?`hsl(0,0%,${(15-props.weight)*100/16}%)`\r\n                            :\"\"};\r\n`;\r\n","const top = 0;\nconst parent = i => ((i + 1) >>> 1) - 1;\nconst left = i => (i << 1) + 1;\nconst right = i => (i + 1) << 1;\n\nexport default class PriorityQueue {\n  constructor(comparator = (a, b) => a > b) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n  size() {\n    return this._heap.length;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n  peek() {\n    return this._heap[top];\n  }\n  push(...values) {\n    values.forEach(value => {\n      this._heap.push(value);\n      this._siftUp();\n    });\n    return this.size();\n  }\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n    this._heap.pop();\n    this._siftDown();\n    return poppedValue;\n  }\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[top] = value;\n    this._siftDown();\n    return replacedValue;\n  }\n  _greater(i, j) {\n    return this._comparator(this._heap[i], this._heap[j]);\n  }\n  _swap(i, j) {\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\n  }\n  _siftUp() {\n    let node = this.size() - 1;\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n      node = parent(node);\n    }\n  }\n  _siftDown() {\n    let node = top;\n    while (\n      (left(node) < this.size() && this._greater(left(node), node)) ||\n      (right(node) < this.size() && this._greater(right(node), node))\n    ) {\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\n      this._swap(node, maxChild);\n      node = maxChild;\n    }\n  }\n}","// javascript-astar 0.4.1\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\nimport PriorityQueue from './PriorityQueue'\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nclass Graph {\n  constructor(gridIn, options) {\n    options = options || {};\n    this.nodes = [];\n    this.diagonal = !!options.diagonal;\n    this.grid = [];\n    this.start = null;\n    this.end = null;\n    for (var x = 0; x < gridIn.length; x++) {\n      this.grid[x] = [];\n\n      for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n        var node = new GridNode(x, y, gridIn[x][y].weight);\n        this.grid[x][y] = node;\n        this.nodes.push(node);\n        if (gridIn[x][y].status === 1)\n          this.start = node;\n        if (gridIn[x][y].status === 2)\n          this.end = node;\n      }\n    }\n    this.init();\n  }\n  init() {\n    this.dirtyNodes = [];\n    for (var i = 0; i < this.nodes.length; i++) {\n      astar.cleanNode(this.nodes[i]);\n    }\n  }\n  cleanDirty() {\n    for (var i = 0; i < this.dirtyNodes.length; i++) {\n      astar.cleanNode(this.dirtyNodes[i]);\n    }\n    this.dirtyNodes = [];\n  }\n  markDirty(node) {\n    this.dirtyNodes.push(node);\n  }\n  neighbors(node) {\n    var ret = [];\n    var x = node.x;\n    var y = node.y;\n    var grid = this.grid;\n\n    // West\n    if (grid[x - 1] && grid[x - 1][y]) {\n      ret.push(grid[x - 1][y]);\n    }\n\n    // East\n    if (grid[x + 1] && grid[x + 1][y]) {\n      ret.push(grid[x + 1][y]);\n    }\n\n    // South\n    if (grid[x] && grid[x][y - 1]) {\n      ret.push(grid[x][y - 1]);\n    }\n\n    // North\n    if (grid[x] && grid[x][y + 1]) {\n      ret.push(grid[x][y + 1]);\n    }\n\n    if (this.diagonal) {\n      // Southwest\n      if (grid[x - 1] && grid[x - 1][y - 1]) {\n        ret.push(grid[x - 1][y - 1]);\n      }\n\n      // Southeast\n      if (grid[x + 1] && grid[x + 1][y - 1]) {\n        ret.push(grid[x + 1][y - 1]);\n      }\n\n      // Northwest\n      if (grid[x - 1] && grid[x - 1][y + 1]) {\n        ret.push(grid[x - 1][y + 1]);\n      }\n\n      // Northeast\n      if (grid[x + 1] && grid[x + 1][y + 1]) {\n        ret.push(grid[x + 1][y + 1]);\n      }\n    }\n\n    return ret;\n  }\n  toString() {\n    var graphString = [];\n    var nodes = this.grid;\n    for (var x = 0; x < nodes.length; x++) {\n      var rowDebug = [];\n      var row = nodes[x];\n      for (var y = 0; y < row.length; y++) {\n        rowDebug.push(row[y].weight);\n      }\n      graphString.push(rowDebug.join(\" \"));\n    }\n    return graphString.join(\"\\n\");\n  }\n}\n\n\n\n\n\n\nclass GridNode {\n  constructor(x, y, weight) {\n    this.x = x;\n    this.y = y;\n    this.weight = weight;\n  }\n  toString() {\n    return \"[\" + this.x + \" \" + this.y + \"]\";\n  }\n  getCost(fromNeighbor) {\n    // Take diagonal weight into consideration.\n    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {\n      return this.weight * 1.41421;\n    }\n    return this.weight;\n  }\n  isWall() {\n    return this.weight === 15\n  }\n}\n\n\n\n\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n  remove(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n  size() {\n    return this.content.length;\n  }\n  rescoreElement(node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n  sinkDown(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  }\n  bubbleUp(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n}\n\n\nconst _reset=(board)=>{\n  let start,end;\n  for(let i=0;i<board.length;i++){\n    for(let j=0;j<board[0].length;j++){\n      board[i][j].f = 0;\n      board[i][j].g = 0;\n      board[i][j].h = 0;\n      board[i][j].isWall = board[i][j].weight === 15;\n      board[i][j].visited = false;\n      board[i][j].closed = false;\n      board[i][j].parent = null;\n      board[i][j].r = i;\n      board[i][j].c = j;\n      board[i][j].isPath = false;\n      if(board[i][j].status===1) start=board[i][j];\n      if(board[i][j].status===2) end=board[i][j];\n    }\n  }\n  return {start,end};\n};\nconst mahattan = (a,b)=>{\n  return Math.abs(a.r-b.r)+Math.abs(a.c-b.c);\n}\nconst d4 = [-1,0,1,0,-1];\nconst square4 = (node,board)=>{\n  const res = [];\n  for(let i=0;i<4;i++){\n    const dr = node.r + d4[i];\n    const dc = node.c + d4[i+1];\n    if(dr>=0&&dc>=0&&dr<board.length&&dc<board[0].length) res.push(board[dr][dc]);\n  }\n  return res;\n}\nconst search=(board,heuristic=mahattan,neighbor=square4)=>{\n  const newBoard = board.slice();\n  const pq = new PriorityQueue((a,b)=>a.f<b.f);\n  const {start,end} = _reset(newBoard);\n  start.h=heuristic(start,end);\n  start.f=start.h;\n  // console.log(newBoard)\n  pq.push({r:start.r,c:start.c,f:start.h});\n  while(pq.size()>0){\n    const {r,c,f} = pq.pop();\n    console.log(r,c,f);\n    const nextNode = newBoard[r][c]; // nextNode: {r,c,f}\n    if(nextNode===end){\n      pathTo(nextNode).forEach((node)=>node.isPath=true);\n      return newBoard;\n    } \n    if(!nextNode.closed){\n      nextNode.closed=true;\n      neighbor(nextNode,newBoard).forEach((node)=>{\n        if(!node.closed && !node.isWall){\n          if(node.visited && nextNode.g + node.weight < node.g){\n            node.parent = nextNode;\n            node.g = nextNode.g + node.weight;\n            node.f = node.g + node.h;\n            pq.push({r:node.r,c:node.c,f:node.f});\n          } else if(!node.visited){\n            node.parent=nextNode;\n            node.g = nextNode.g + node.weight;\n            node.h = heuristic(node,end);\n            node.visited = true;\n            node.f = node.g + node.h;\n            pq.push({r:node.r,c:node.c,f:node.f});\n          }\n        }\n      })\n    }\n    \n  }\n  return newBoard;\n}\n\n\nexport {search as default, Graph, astar}\n","\nconst d4 = [-1,0,1,0,-1];\nconst square4 = (node,board)=>{\n  const res = [];\n  for(let i=0;i<4;i++){\n    const dr = node.r + d4[i];\n    const dc = node.c + d4[i+1];\n    if(dr>=0&&dc>=0&&dr<board.length&&dc<board[0].length) res.push(board[dr][dc]);\n  }\n  return res;\n}\nconst pathTo = (node) => {\n  let curr = node;\n  const path = [];\n  while (curr.parent!==null) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\nexport { square4, pathTo }","import PriorityQueue from './PriorityQueue'\nimport {square4, pathTo} from './Neighbor'\nconst _reset = (board)=>{\n  let start,end;\n  for(let i=0;i<board.length;i++){\n    for(let j=0;j<board[0].length;j++){\n      board[i][j].visited = false;\n      board[i][j].closed = false;\n      board[i][j].isWall = board[i][j].weight === 15;\n      board[i][j].parent = null;\n      board[i][j].f = 0;\n      board[i][j].r = i;\n      board[i][j].c = j;\n      board[i][j].isPath = false;\n      if(board[i][j].status===1) start=board[i][j];\n      if(board[i][j].status===2) end=board[i][j];\n    }\n  }\n  return {start,end};\n}\n\nconst search = (board,neighbor=square4)=>{\n  const pq = new PriorityQueue((a,b)=>a.f<b.f);\n  const newBoard = board.slice();\n  const {start,end} = _reset(newBoard);\n  pq.push({r:start.r,c:start.c,f:0});\n  while(pq.size()>0){\n    const {r,c,f} = pq.pop();\n    const current = newBoard[r][c];\n    if(current===end){\n      pathTo(current).forEach((node)=>node.isPath=true);\n      return newBoard;\n    }\n    if(!current.closed){\n      current.closed = true;\n      neighbor(current,newBoard).forEach((node)=>{\n        if(!node.closed&&!node.isWall){\n          if(node.visited&&current.f+node.weight<node.f){\n            node.parent = current;\n            node.f = f + node.weight;\n            pq.push({r:node.r,c:node.c,f:node.f});\n          } else if(!node.visited){\n            node.parent = current;\n            node.f = f + node.weight;\n            node.visited = true;\n            pq.push({r:node.r,c:node.c,f:node.f});\n          }\n        }\n      })\n    }\n  }\n  return newBoard;\n}\nexport default search;","import {useEffect, useState} from 'react';\r\nimport Node from './Node';\r\n\r\nimport aStarSearch from '../../algorithms/Astar';\r\nimport dijkstraSearch from '../../algorithms/Dijkstra';\r\nimport \"./Board.css\";\r\nexport default function Board(props){\r\n  const {boardSize,heuristic,start,setStart,algorithm} = props;\r\n  const [board,setBoard] = useState([]);\r\n  const [mousePress,setMousePress] =  useState(0);\r\n  let [nodePress,setNodePress] = useState(null);\r\n  useEffect(()=>{\r\n    setBoard(gridGenerator(boardSize[0],boardSize[1]));\r\n  },[boardSize]);\r\n  useEffect(()=>{\r\n    switch(algorithm){\r\n      case \"dijkstra\":\r\n        setBoard(defaultDijkstra(boardSize[0],boardSize[1]));\r\n        setStart(true);\r\n        break;\r\n      default:\r\n    }\r\n  },[])\r\n  useEffect(()=>{\r\n    if(start){\r\n      switch(algorithm){\r\n        case \"a*\":\r\n          setBoard(aStarSearch(board));\r\n          break;\r\n        case \"dijkstra\":\r\n          setBoard(dijkstraSearch(board));\r\n          break;\r\n        default:\r\n      }\r\n      setStart(false);\r\n    }\r\n  },[start,board]);\r\n  const rightClick=(event,row,col)=>{\r\n    event.preventDefault();\r\n    // setBoard(wallToggle(board,row,col));\r\n  }\r\n  const onMouseDown = (event,row, col) => {\r\n    event.preventDefault();\r\n    if(board[row][col].status!==0){//special node\r\n      setNodePress ([row,col]);\r\n      setMousePress(event.buttons);\r\n    } else {\r\n      switch(event.buttons){\r\n        case 2://leftmouse press\r\n          setMousePress(2);\r\n          setBoard(wallToggle(board,row,col));\r\n          break;\r\n        case 1://rightmouse press\r\n          setMousePress(1);\r\n          setBoard(weightChange(board,row,col));\r\n          break;\r\n        default:\r\n      }  \r\n    }\r\n    setStart(true);\r\n      \r\n  }\r\n\r\n  const onMouseEnter = (event,row, col) => {\r\n    event.preventDefault();\r\n    if(nodePress!==null){ //special node\r\n      if(board[row][col].status===0&&mousePress!==0){\r\n        setBoard(moveSpecialNode(board,nodePress[0],nodePress[1],row,col));\r\n        setNodePress([row,col]);\r\n        setStart(true);\r\n      }\r\n    }else if (mousePress===2){\r\n      setBoard(wallToggle(board,row,col));\r\n      setStart(true);\r\n    } else if(mousePress===1){\r\n      setBoard(weightChange(board,row,col));\r\n      setStart(true);\r\n    }\r\n  }\r\n\r\n  const onMouseUp = (event) => {\r\n    event.preventDefault();\r\n    setMousePress(0);\r\n    setNodePress(null);\r\n  }\r\n\r\n  return (\r\n    <table>\r\n    <tbody>\r\n    {board.map((row,rid)=>{\r\n      return (\r\n        <tr key={rid} className=\"row\">\r\n          {row.map((node,nid)=>{\r\n            return(\r\n              <Node\r\n                key={nid}\r\n                nodeInfo={node}\r\n                onRightClick={rightClick}\r\n                onMouseDown={onMouseDown}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseUp={onMouseUp}\r\n              />\r\n            ) \r\n          })}\r\n        </tr>\r\n      )\r\n    })\r\n    }\r\n    </tbody>\r\n    </table>\r\n  )\r\n  \r\n}\r\n\r\nconst moveSpecialNode = (board,prevRow,prevCol,newRow,newCol) => {\r\n  const newBoard = board.slice();\r\n  const status = board[prevRow][prevCol].status;\r\n  newBoard[prevRow][prevCol] = {\r\n    ...board[prevRow][prevCol],\r\n    status:0,\r\n  }\r\n  newBoard[newRow][newCol] = {\r\n    ...board[newRow][newCol],\r\n    status:status,\r\n  }\r\n  return newBoard;\r\n}\r\nconst gridGenerator = (row,col) => {\r\n  const grid = [];\r\n  for(let i=0;i<row;i++){\r\n    const row = [];\r\n    for(let j=0;j<col;j++){\r\n      row.push(nodeGenerator(i,j));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  grid[0][0].status=1;\r\n  grid[grid.length-1][grid[0].length-1].status=2;\r\n  return grid;\r\n}\r\n/*\r\nnode status:\r\n0: normal\r\n1: start\r\n2: end\r\n3: side-quest\r\n\r\n*/\r\nconst nodeGenerator = (row,col) => {\r\n  return {\r\n    row,col,\r\n    weight:1,\r\n    status:0,\r\n  }\r\n}\r\nconst defaultDijkstra = (row,col) => {\r\n  const grid = [];\r\n  for(let i=0;i<row;i++){\r\n    const row = [];\r\n    for(let j=0;j<col;j++){\r\n      row.push(nodeGenerator(i,j));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  for(let i=2;i<8;i++) grid[6][i].weight=15;\r\n  for(let i=6;i<13;i++) grid[i][8].weight=15;\r\n  grid[10][4].status=1;\r\n  grid[2][12].status=2;\r\n  return grid;\r\n}\r\nconst weightChange = (board,row,col) => {\r\n  const newBoard = board.slice();\r\n  const oldNode = newBoard[row][col];\r\n  newBoard[row][col] = {\r\n    ...oldNode,\r\n    weight: (oldNode.weight+1)%16,\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nconst wallToggle = (board,row,col) => {\r\n  const newBoard = board.slice();\r\n  const oldNode = newBoard[row][col];\r\n  newBoard[row][col] = {\r\n    ...oldNode,\r\n    weight:oldNode.weight===15?1:15,\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nconst getShortestPath = (board,start,end)=>{\r\n\r\n}\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport Slider from '@material-ui/core/Slider'\r\nimport styled  from 'styled-components';\r\n\r\nexport default function Tooltip(props){\r\n  const {boardSize,setBoardSize,heuristic,setHeuristic,setStart} = props;\r\n  return(\r\n    <TooltipWrapper>\r\n      <Row>\r\n        Row   \r\n        <RowSlider\r\n        aria-label=\"Column\"\r\n        max={20}\r\n        min={5}\r\n        marks\r\n        step={1}\r\n        value={boardSize[0]}\r\n        onChange={(event,value)=>setBoardSize([value,boardSize[1]])}\r\n        valueLabelDisplay=\"auto\"\r\n        component=\"span\"\r\n        />\r\n      </Row>\r\n      <Row>\r\n        Column\r\n        <RowSlider\r\n        aria-label=\"Column\"\r\n        max={20}\r\n        min={5}\r\n        marks\r\n        step={1}\r\n        value={boardSize[1]}\r\n        onChange={(event,value)=>setBoardSize([boardSize[0],value])}\r\n        valueLabelDisplay=\"auto\"\r\n        component=\"span\"\r\n        />\r\n      </Row>\r\n    <Button variant=\"contained\" onClick={()=>setStart(true)}>Start</Button>\r\n    <Button variant=\"contained\" onClick={()=>setBoardSize([...boardSize])}>Reset</Button>\r\n\r\n    </TooltipWrapper>\r\n  )\r\n}\r\nconst TooltipWrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:521px;\r\n`\r\nconst Row = styled.div`\r\n\r\n  display:flex;\r\n  justify-content:space-between;\r\n`\r\nconst RowSlider = styled(Slider)`\r\n  &&{\r\n    width: 300px;\r\n  }\r\n`\r\n","import { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport Tooltip from './Tooltip'\r\nimport styled from \"styled-components\"\r\nexport default function Playground(){\r\n  const [boardSize,setBoardSize] = useState([15,15]);\r\n  const [heuristic,setHeuristic] = useState(\"manhattan\");\r\n  const [algorithm,setAlgorithm] = useState(\"a*\");\r\n  const [start,setStart] = useState(false);\r\n  return(\r\n    <Wrapper>\r\n      <Tooltip\r\n        boardSize={boardSize} \r\n        setBoardSize={setBoardSize}\r\n        heuristic={heuristic}\r\n        setHeuristic={setHeuristic}\r\n        start={start}\r\n        setStart={setStart}\r\n        algorithm={algorithm}\r\n        setAlgorithm={setAlgorithm}\r\n      />\r\n      <StyledBoard\r\n        start={start}\r\n        setStart={setStart}\r\n        boardSize={boardSize}\r\n        heuristic={heuristic}\r\n        algorithm={algorithm}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n display:flex;\r\n flex-direction:column;\r\n align-items:center;\r\n`\r\nconst StyledBoard = styled(Board)`\r\n  width:521px;\r\n  height:521px;\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        A star\r\n        <br />\r\n        PLAYGROUND\r\n      </IntroText>\r\n      <StyledButton onClick={()=>setChapterStage(1)}>\r\n        Start\r\n        <KeyboardArrowRightIcon fontSize=\"small\" />\r\n      </StyledButton>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n`\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  width:300px;\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';export default function Forward(props){\r\n  const {onClick} = props;\r\n  return(\r\n    <StyledButton onClick={onClick}>\r\n      Back\r\n      <KeyboardArrowLeftIcon size=\"small\" />\r\n    </StyledButton>\r\n  )\r\n}\r\nconst StyledButton = styled(Button)`\r\n  && {\r\n    width:300px;\r\n    margin:30px;\r\n  }\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nexport default function Forward(props){\r\n  const {onClick} = props;\r\n  return(\r\n    <StyledButton onClick={onClick}>\r\n      Next\r\n      <KeyboardArrowRightIcon size=\"small\" />\r\n    </StyledButton>\r\n  )\r\n}\r\nconst StyledButton = styled(Button)`\r\n  && {\r\n    width:300px;\r\n    margin:30px;\r\n  }\r\n`","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <Text>\r\n      Movement for a single object seems easy.\r\n      <br />Pathfinding is complex.\r\n      <br />Why bother with pathfinding? \r\n      </Text>\r\n      <Text>\r\n        - Shortest path\r\n        <br />- Time efficiency\r\n      </Text>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(0)}/>\r\n        <Forward onClick={()=>setChapterStage(2)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\n\r\n","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <Text>\r\n        Pathfinding algorithms works with Graph\r\n        <br />an abstract mathematic definition\r\n        <br />contains vertices (location) and edges (connections)\r\n      </Text>\r\n      <Text>\r\n        For simplicity and visualization purpose, Grid is used\r\n        <br />Playground is interactive:\r\n        <br />- Nodes can be dragged around\r\n        <br />- Leftclick/press to add weight\r\n        <br />- Rightclick/press to toggle wall\r\n      </Text>\r\n      <Text>\r\n        Board example placeholder\r\n        <br />Map representation placeholder\r\n      </Text>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(1)}/>\r\n        <Forward onClick={()=>setChapterStage(3)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\n\r\n","import {useState} from 'react'\r\nimport Screen00 from './Screen00'\r\nimport Screen01 from './Screen01'\r\nimport Screen02 from './Screen02'\r\nexport default function Chapter0(props){\r\n  const {setStage} = props;\r\n  const [chapterStage,setChapterStage] = useState(0);\r\n  switch(chapterStage){\r\n    case 0:\r\n      return (<Screen00 setChapterStage={setChapterStage}/>);     \r\n    case 1:\r\n      return (<Screen01 setChapterStage={setChapterStage}/>);     \r\n    case 2:\r\n      return (<Screen02 setChapterStage={setChapterStage}/>);     \r\n    default:\r\n      setStage(1);\r\n      return null;\r\n  }\r\n}\r\n","import styled from \"styled-components\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen10(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        Chapter 1:\r\n        <br />\r\n        Pathfinding algorithms\r\n      </IntroText>\r\n      <Text>\r\n        This chapter covers basic algorithms for pathfinding:\r\n        <br />- Dijkstra\r\n        <br />- Heuristic\r\n        <br />- A*\r\n      </Text>\r\n      <Text>\r\n        Assumption:\r\n        <br />- Each node on the grid has a positive weight represent the cost to move through it\r\n        <br />- The goal is to find the smallest cost path\r\n      </Text>\r\n        <Forward onClick={()=>setChapterStage(1)}/>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\n","import { useState } from \"react\";\nimport Board from \"./Board\";\nimport styled from \"styled-components\"\nexport default function Dikstra(){\n  const [boardSize,setBoardSize] = useState([15,15]);\n  const [algorithm,setAlgorithm] = useState(\"dijkstra\");\n  const [start,setStart] = useState(false);\n  return(\n    \n      <Board\n        start={start}\n        setStart={setStart}\n        boardSize={boardSize}\n        heuristic=\"manhattan\"\n        algorithm={algorithm}\n      />\n    \n  )\n}\n\n","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nimport Dijsktra from \"../Playground/Dijkstra\"\r\nexport default function Screen11(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        Dijsktra\r\n        <br />\r\n        Uniform Cost Search\r\n      </IntroText>\r\n      <Grid container direction=\"row\" justify=\"center\">\r\n        <Text>\r\n          Maintain a priority queue\r\n          <br />Process node with increasing weight\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />Problem: The search expands in all direction\r\n        </Text>\r\n        <Dijsktra />\r\n      </Grid>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(0)}/>\r\n        <Forward onClick={()=>setChapterStage(2)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\n","import styled from \"styled-components\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Backward from \"../Navigation/Backward\"\nimport Forward from \"../Navigation/Forward\"\nimport Dijsktra from \"../Playground/Dijkstra\"\nexport default function Screen11(props){\n  const {setChapterStage} = props;\n  return(\n    <Wrapper>\n      <IntroText>\n        Heuristic\n        <br />\n        Greedy Best First Search\n      </IntroText>\n      <Grid container direction=\"row\" justify=\"center\">\n        <Text>\n          Maintain a priority queue\n          <br />Process node with increasing weight\n          <br />\n          <br />\n          <br />\n          <br />Problem: The search expands in all direction\n        </Text>\n        <Dijsktra />\n      </Grid>\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\n        <Backward onClick={()=>setChapterStage(1)}/>\n        <Forward onClick={()=>setChapterStage(3)}/>\n      </BottomGrid>\n    </Wrapper>\n  )\n}\nconst Wrapper = styled.div`\n  display:flex;\n  flex-direction:column;\n  width:100%;\n  align-items:center;\n`\nconst Text = styled.p`\n  font-size:24px;\n  width:60%;\n`\nconst BottomGrid = styled(Grid)`\n  && {\n    margin-top:auto;\n    margin-bottom:72px;\n  }\n`\n\nconst IntroText = styled.h1`\n  text-align:center;\n`\n","import {useState} from 'react'\r\nimport Screen10 from './Screen10'\r\nimport Screen11 from './Screen11'\r\nimport Screen12 from './Screen12'\r\nexport default function Chapter1(props){\r\n  const {setStage} = props;\r\n  const [chapterStage,setChapterStage] = useState(0);\r\n  switch(chapterStage){\r\n    case 0:\r\n      return (<Screen10 setChapterStage={setChapterStage}/>);     \r\n    case 1:\r\n      return (<Screen11 setChapterStage={setChapterStage}/>);     \r\n    case 2:\r\n      return (<Screen12 setChapterStage={setChapterStage}/>);     \r\n    default:\r\n      setStage(2);\r\n      return null;\r\n  }\r\n}\r\n","\n/*\n<StyledNavigation value={stage} onChange={(event,value)=>setStage(value)}>\n      <BottomNavigationAction label=\"Recents\" value={0}  icon={<RestoreIcon />}/>\n      <BottomNavigationAction label=\"Favorites\" value={1} icon={<RestoreIcon />} />\n      <BottomNavigationAction label=\"Nearby\" value=\"nearby\"  />\n      <BottomNavigationAction label=\"Folder\" value=\"folder\" />\n    </StyledNavigation>\n*/\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fab from '@material-ui/core/Fab';\nimport styled from 'styled-components'\n\nexport default function Navigation(props){\n  const {stage,setStage} = props;\n  return (\n    <StyleDiv>\n      <StyledTooltip title=\"Chapter 0: Introduction\" onClick={()=>setStage(0)}>\n        <Fab color=\"primary\" size=\"small\">\n          0\n        </Fab>\n      </StyledTooltip>\n      <StyledTooltip title=\"Chapter 1: Pathfinding Algorithm\" onClick={()=>setStage(1)}>\n        <Fab color=\"primary\" size=\"small\">\n          1\n        </Fab>\n      </StyledTooltip>\n      <StyledTooltip title=\"Chapter 2: Heuristic\" onClick={()=>setStage(2)}>\n        <Fab color=\"primary\" size=\"small\">\n          2\n        </Fab>\n      </StyledTooltip>\n      <StyledTooltip title=\"Chapter 3: Breaking tie\" onClick={()=>setStage(3)}>\n        <Fab color=\"primary\" size=\"small\">\n          3\n        </Fab>\n      </StyledTooltip>\n      <StyledTooltip title=\"Chapter 4: Playground\" onClick={()=>setStage(4)}>\n        <Fab color=\"primary\" size=\"small\">\n          4\n        </Fab>\n      </StyledTooltip>\n    </StyleDiv>\n  )\n}\nconst StyledTooltip = styled(Tooltip)`\n  && {\n    margin: 8px;\n  }\n`\nconst StyleFab = styled(Fab)`\n`\nconst StyleDiv  = styled.div`\n  width:100%;\n  padding:12px;\n  background:#333;\n  position:absolute;\n  bottom:0;\n  justify-content:center;\n  display:flex;\n`","import {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Playground from './Playground/Playground'\r\nimport Chapter0 from './Chapter0/Chapter0'\r\nimport Chapter1 from './Chapter1/Chapter1'\r\nimport Navigation from './Navigation/Navigation'\r\nexport default function Main() {\r\n  const [stage,setStage] = useState(0);\r\n  return (\r\n    <FontFormat>\r\n    {\r\n      stage===0?<Chapter0 setStage={setStage}/>\r\n      :stage===1?<Chapter1 setStage={setStage}/>\r\n      :stage===4?<Playground />\r\n      :null\r\n    }\r\n    <Navigation setStage={setStage}  stage={stage}/>\r\n    </FontFormat>\r\n\r\n  );\r\n}\r\nconst FontFormat = styled.div`\r\n  font-size:20px;\r\n  display:flex;\r\n  justify-content:center;\r\n  font-family:'Futura Handwritten';\r\n`\r\n\r\n","export default __webpack_public_path__ + \"static/media/FuturaHandwritten.dbaf4545.ttf\";","import { createGlobalStyle } from 'styled-components'\nimport FuturaHandwritten from './FuturaHandwritten.ttf'\nexport default createGlobalStyle`\n  @font-face {\n    font-family: 'Futura Handwritten';\n    src: url(${FuturaHandwritten}) format('truetype'),\n    local('Futura Handwritten');\n    font-weight: 300;\n    font-style: normal;\n  }\n`;","import Main from './components/Main'\r\nimport GlobalFonts from './fonts/fonts'\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    button:{\r\n      textTransform:\"none\",\r\n    },\r\n    fontSize:24,\r\n    fontFamily: [\r\n      'Chilanka',\r\n      'cursive',\r\n    ].join(','),\r\n  },});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalFonts />\r\n      <Main />\r\n    </ThemeProvider>\r\n    \r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}