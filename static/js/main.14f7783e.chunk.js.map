{"version":3,"sources":["components/Playground/Node.jsx","algorithms/PriorityQueue.js","algorithms/Astar.js","components/Playground/Board.jsx","components/Playground/Tooltip.jsx","components/Playground/Playground.jsx","components/Chapter0/Screen00.jsx","components/Navigation/Backward.jsx","components/Navigation/Forward.jsx","components/Chapter0/Screen01.jsx","components/Chapter0/Screen02.jsx","components/Chapter0/Chapter0.jsx","components/Chapter1/Screen10.jsx","components/Chapter1/Screen11.jsx","components/Chapter1/Chapter1.jsx","components/Navigation/Navigation.jsx","components/Main.jsx","fonts/FuturaHandwritten.ttf","fonts/fonts.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","onRightClick","nodeInfo","row","col","status","weight","isPath","onMouseUp","onMouseDown","onMouseEnter","StyleNode","onContextMenu","event","styled","td","parent","i","left","right","PriorityQueue","comparator","a","b","this","_heap","_comparator","length","size","values","forEach","value","push","_siftUp","poppedValue","peek","bottom","_swap","pop","_siftDown","replacedValue","j","node","_greater","maxChild","pathTo","curr","path","unshift","_reset","board","start","end","f","g","h","isWall","visited","closed","r","c","mahattan","Math","abs","d4","square4","res","dr","dc","moveSpecialNode","prevRow","prevCol","newRow","newCol","newBoard","slice","gridGenerator","grid","nodeGenerator","weightChange","oldNode","wallToggle","Tooltip","boardSize","setBoardSize","setStart","heuristic","setHeuristic","TooltipWrapper","Row","RowSlider","aria-label","max","min","marks","step","onChange","valueLabelDisplay","component","Button","variant","onClick","div","Slider","Playground","useState","Wrapper","StyledBoard","setBoard","mousePress","setMousePress","nodePress","setNodePress","useEffect","neighbor","pq","console","log","nextNode","search","rightClick","preventDefault","buttons","map","rid","className","nid","Screen00","setChapterStage","IntroText","StyledButton","fontSize","h1","Forward","Text","BottomGrid","container","justify","direction","p","Grid","Chapter0","setStage","chapterStage","Screen10","Screen11","Chapter1","Navigation","stage","StyleDiv","StyledTooltip","title","Fab","color","Main","FontFormat","createGlobalStyle","FuturaHandwritten","theme","createMuiTheme","typography","button","textTransform","fontFamily","join","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14f7783e.chunk.js","sourcesContent":["\r\nimport styled  from 'styled-components';\r\n\r\nexport default function Node(props){\r\n  const { onRightClick,nodeInfo:{row,col,status,weight,isPath}, onMouseUp, onMouseDown, onMouseEnter } = props;\r\nreturn(\r\n  <StyleNode\r\n    row={row}\r\n    col={col}\r\n    weight={weight}\r\n    status={status}\r\n    isPath={isPath}\r\n    onContextMenu = {(event)=>onRightClick(event,row,col)} \r\n    onMouseDown={(event)=>onMouseDown(event,row,col)}\r\n    onMouseUp={(event)=>onMouseUp(event,row,col)}\r\n    onMouseEnter={(event)=>onMouseEnter(event,row,col)}\r\n  />\r\n    \r\n)\r\n}\r\nconst StyleNode = styled.td`\r\n  width: 25px;\r\n  height: 25px;\r\n  border: 1px solid rgb(175, 216, 248);  \r\n  background-color: ${props=>props.status===1?`rgb(248, 131, 131)`\r\n                            :props.status===2?`rgb(129, 127, 252)`\r\n                            :props.isPath===true?`rgb(219, 241, 70)`\r\n                            :props.status===0?`hsl(0,0%,${(15-props.weight)*100/16}%)`\r\n                            :\"\"};\r\n`;\r\n","const top = 0;\r\nconst parent = i => ((i + 1) >>> 1) - 1;\r\nconst left = i => (i << 1) + 1;\r\nconst right = i => (i + 1) << 1;\r\n\r\nexport default class PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n  }\r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n  peek() {\r\n    return this._heap[top];\r\n  }\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > top) {\r\n      this._swap(top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > top && this._greater(node, parent(node))) {\r\n      this._swap(node, parent(node));\r\n      node = parent(node);\r\n    }\r\n  }\r\n  _siftDown() {\r\n    let node = top;\r\n    while (\r\n      (left(node) < this.size() && this._greater(left(node), node)) ||\r\n      (right(node) < this.size() && this._greater(right(node), node))\r\n    ) {\r\n      let maxChild = (right(node) < this.size() && this._greater(right(node), left(node))) ? right(node) : left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}","// javascript-astar 0.4.1\r\n// http://github.com/bgrins/javascript-astar\r\n// Freely distributable under the MIT License.\r\n// Implements the astar search algorithm in javascript using a Binary Heap.\r\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\r\n// http://eloquentjavascript.net/appendix2.html\r\nimport PriorityQueue from './PriorityQueue'\r\nfunction pathTo(node) {\r\n  var curr = node;\r\n  var path = [];\r\n  while (curr.parent) {\r\n    path.unshift(curr);\r\n    curr = curr.parent;\r\n  }\r\n  return path;\r\n}\r\n\r\nfunction getHeap() {\r\n  return new BinaryHeap(function(node) {\r\n    return node.f;\r\n  });\r\n}\r\n\r\nvar astar = {\r\n  /**\r\n  * Perform an A* Search on a graph given a start and end node.\r\n  * @param {Graph} graph\r\n  * @param {GridNode} start\r\n  * @param {GridNode} end\r\n  * @param {Object} [options]\r\n  * @param {bool} [options.closest] Specifies whether to return the\r\n             path to the closest node if the target is unreachable.\r\n  * @param {Function} [options.heuristic] Heuristic function (see\r\n  *          astar.heuristics).\r\n  */\r\n  search: function(graph, start, end, options) {\r\n    graph.cleanDirty();\r\n    options = options || {};\r\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\r\n    var closest = options.closest || false;\r\n\r\n    var openHeap = getHeap();\r\n    var closestNode = start; // set the start node to be the closest if required\r\n    start.h = heuristic(start, end);\r\n    graph.markDirty(start);\r\n\r\n    openHeap.push(start);\r\n\r\n    while (openHeap.size() > 0) {\r\n\r\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\r\n      var currentNode = openHeap.pop();\r\n\r\n      // End case -- result has been found, return the traced path.\r\n      if (currentNode === end) {\r\n        return pathTo(currentNode);\r\n      }\r\n\r\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\r\n      currentNode.closed = true;\r\n\r\n      // Find all neighbors for the current node.\r\n      var neighbors = graph.neighbors(currentNode);\r\n\r\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\r\n        var neighbor = neighbors[i];\r\n\r\n        if (neighbor.closed || neighbor.isWall()) {\r\n          // Not a valid node to process, skip to next neighbor.\r\n          continue;\r\n        }\r\n\r\n        // The g score is the shortest distance from start to current node.\r\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\r\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\r\n        var beenVisited = neighbor.visited;\r\n\r\n        if (!beenVisited || gScore < neighbor.g) {\r\n\r\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\r\n          neighbor.visited = true;\r\n          neighbor.parent = currentNode;\r\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\r\n          neighbor.g = gScore;\r\n          neighbor.f = neighbor.g + neighbor.h;\r\n          graph.markDirty(neighbor);\r\n          if (closest) {\r\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\r\n            // a cheaper path than the current closest node then it becomes the closest node\r\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\r\n              closestNode = neighbor;\r\n            }\r\n          }\r\n\r\n          if (!beenVisited) {\r\n            // Pushing to heap will put it in proper place based on the 'f' value.\r\n            openHeap.push(neighbor);\r\n          } else {\r\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\r\n            openHeap.rescoreElement(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closest) {\r\n      return pathTo(closestNode);\r\n    }\r\n\r\n    // No result was found - empty array signifies failure to find path.\r\n    return [];\r\n  },\r\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\r\n  heuristics: {\r\n    manhattan: function(pos0, pos1) {\r\n      var d1 = Math.abs(pos1.x - pos0.x);\r\n      var d2 = Math.abs(pos1.y - pos0.y);\r\n      return d1 + d2;\r\n    },\r\n    diagonal: function(pos0, pos1) {\r\n      var D = 1;\r\n      var D2 = Math.sqrt(2);\r\n      var d1 = Math.abs(pos1.x - pos0.x);\r\n      var d2 = Math.abs(pos1.y - pos0.y);\r\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\r\n    }\r\n  },\r\n  cleanNode: function(node) {\r\n    node.f = 0;\r\n    node.g = 0;\r\n    node.h = 0;\r\n    node.visited = false;\r\n    node.closed = false;\r\n    node.parent = null;\r\n  }\r\n};\r\n\r\n/**\r\n * A graph memory structure\r\n * @param {Array} gridIn 2D array of input weights\r\n * @param {Object} [options]\r\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\r\n */\r\nclass Graph {\r\n  constructor(gridIn, options) {\r\n    options = options || {};\r\n    this.nodes = [];\r\n    this.diagonal = !!options.diagonal;\r\n    this.grid = [];\r\n    this.start = null;\r\n    this.end = null;\r\n    for (var x = 0; x < gridIn.length; x++) {\r\n      this.grid[x] = [];\r\n\r\n      for (var y = 0, row = gridIn[x]; y < row.length; y++) {\r\n        var node = new GridNode(x, y, gridIn[x][y].weight);\r\n        this.grid[x][y] = node;\r\n        this.nodes.push(node);\r\n        if (gridIn[x][y].status === 1)\r\n          this.start = node;\r\n        if (gridIn[x][y].status === 2)\r\n          this.end = node;\r\n      }\r\n    }\r\n    this.init();\r\n  }\r\n  init() {\r\n    this.dirtyNodes = [];\r\n    for (var i = 0; i < this.nodes.length; i++) {\r\n      astar.cleanNode(this.nodes[i]);\r\n    }\r\n  }\r\n  cleanDirty() {\r\n    for (var i = 0; i < this.dirtyNodes.length; i++) {\r\n      astar.cleanNode(this.dirtyNodes[i]);\r\n    }\r\n    this.dirtyNodes = [];\r\n  }\r\n  markDirty(node) {\r\n    this.dirtyNodes.push(node);\r\n  }\r\n  neighbors(node) {\r\n    var ret = [];\r\n    var x = node.x;\r\n    var y = node.y;\r\n    var grid = this.grid;\r\n\r\n    // West\r\n    if (grid[x - 1] && grid[x - 1][y]) {\r\n      ret.push(grid[x - 1][y]);\r\n    }\r\n\r\n    // East\r\n    if (grid[x + 1] && grid[x + 1][y]) {\r\n      ret.push(grid[x + 1][y]);\r\n    }\r\n\r\n    // South\r\n    if (grid[x] && grid[x][y - 1]) {\r\n      ret.push(grid[x][y - 1]);\r\n    }\r\n\r\n    // North\r\n    if (grid[x] && grid[x][y + 1]) {\r\n      ret.push(grid[x][y + 1]);\r\n    }\r\n\r\n    if (this.diagonal) {\r\n      // Southwest\r\n      if (grid[x - 1] && grid[x - 1][y - 1]) {\r\n        ret.push(grid[x - 1][y - 1]);\r\n      }\r\n\r\n      // Southeast\r\n      if (grid[x + 1] && grid[x + 1][y - 1]) {\r\n        ret.push(grid[x + 1][y - 1]);\r\n      }\r\n\r\n      // Northwest\r\n      if (grid[x - 1] && grid[x - 1][y + 1]) {\r\n        ret.push(grid[x - 1][y + 1]);\r\n      }\r\n\r\n      // Northeast\r\n      if (grid[x + 1] && grid[x + 1][y + 1]) {\r\n        ret.push(grid[x + 1][y + 1]);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n  toString() {\r\n    var graphString = [];\r\n    var nodes = this.grid;\r\n    for (var x = 0; x < nodes.length; x++) {\r\n      var rowDebug = [];\r\n      var row = nodes[x];\r\n      for (var y = 0; y < row.length; y++) {\r\n        rowDebug.push(row[y].weight);\r\n      }\r\n      graphString.push(rowDebug.join(\" \"));\r\n    }\r\n    return graphString.join(\"\\n\");\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass GridNode {\r\n  constructor(x, y, weight) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.weight = weight;\r\n  }\r\n  toString() {\r\n    return \"[\" + this.x + \" \" + this.y + \"]\";\r\n  }\r\n  getCost(fromNeighbor) {\r\n    // Take diagonal weight into consideration.\r\n    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {\r\n      return this.weight * 1.41421;\r\n    }\r\n    return this.weight;\r\n  }\r\n  isWall() {\r\n    return this.weight === 15\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nclass BinaryHeap {\r\n  constructor(scoreFunction) {\r\n    this.content = [];\r\n    this.scoreFunction = scoreFunction;\r\n  }\r\n  push(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n\r\n    // Allow it to sink down.\r\n    this.sinkDown(this.content.length - 1);\r\n  }\r\n  pop() {\r\n    // Store the first element so we can return it later.\r\n    var result = this.content[0];\r\n    // Get the element at the end of the array.\r\n    var end = this.content.pop();\r\n    // If there are any elements left, put the end element at the\r\n    // start, and let it bubble up.\r\n    if (this.content.length > 0) {\r\n      this.content[0] = end;\r\n      this.bubbleUp(0);\r\n    }\r\n    return result;\r\n  }\r\n  remove(node) {\r\n    var i = this.content.indexOf(node);\r\n\r\n    // When it is found, the process seen in 'pop' is repeated\r\n    // to fill up the hole.\r\n    var end = this.content.pop();\r\n\r\n    if (i !== this.content.length - 1) {\r\n      this.content[i] = end;\r\n\r\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\r\n        this.sinkDown(i);\r\n      } else {\r\n        this.bubbleUp(i);\r\n      }\r\n    }\r\n  }\r\n  size() {\r\n    return this.content.length;\r\n  }\r\n  rescoreElement(node) {\r\n    this.sinkDown(this.content.indexOf(node));\r\n  }\r\n  sinkDown(n) {\r\n    // Fetch the element that has to be sunk.\r\n    var element = this.content[n];\r\n\r\n    // When at 0, an element can not sink any further.\r\n    while (n > 0) {\r\n\r\n      // Compute the parent element's index, and fetch it.\r\n      var parentN = ((n + 1) >> 1) - 1;\r\n      var parent = this.content[parentN];\r\n      // Swap the elements if the parent is greater.\r\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n        this.content[parentN] = element;\r\n        this.content[n] = parent;\r\n        // Update 'n' to continue at the new position.\r\n        n = parentN;\r\n      }\r\n\r\n      // Found a parent that is less, no need to sink any further.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  bubbleUp(n) {\r\n    // Look up the target element and its score.\r\n    var length = this.content.length;\r\n    var element = this.content[n];\r\n    var elemScore = this.scoreFunction(element);\r\n\r\n    while (true) {\r\n      // Compute the indices of the child elements.\r\n      var child2N = (n + 1) << 1;\r\n      var child1N = child2N - 1;\r\n      // This is used to store the new position of the element, if any.\r\n      var swap = null;\r\n      var child1Score;\r\n      // If the first child exists (is inside the array)...\r\n      if (child1N < length) {\r\n        // Look it up and compute its score.\r\n        var child1 = this.content[child1N];\r\n        child1Score = this.scoreFunction(child1);\r\n\r\n        // If the score is less than our element's, we need to swap.\r\n        if (child1Score < elemScore) {\r\n          swap = child1N;\r\n        }\r\n      }\r\n\r\n      // Do the same checks for the other child.\r\n      if (child2N < length) {\r\n        var child2 = this.content[child2N];\r\n        var child2Score = this.scoreFunction(child2);\r\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\r\n          swap = child2N;\r\n        }\r\n      }\r\n\r\n      // If the element needs to be moved, swap it, and continue.\r\n      if (swap !== null) {\r\n        this.content[n] = this.content[swap];\r\n        this.content[swap] = element;\r\n        n = swap;\r\n      }\r\n\r\n      // Otherwise, we are done.\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst _reset=(board)=>{\r\n  let start,end;\r\n  for(let i=0;i<board.length;i++){\r\n    for(let j=0;j<board[0].length;j++){\r\n      board[i][j].f = 0;\r\n      board[i][j].g = 0;\r\n      board[i][j].h = 0;\r\n      board[i][j].isWall = board[i][j].weight === 15;\r\n      board[i][j].visited = false;\r\n      board[i][j].closed = false;\r\n      board[i][j].parent = null;\r\n      board[i][j].r = i;\r\n      board[i][j].c = j;\r\n      board[i][j].isPath = false;\r\n      if(board[i][j].status===1) start=board[i][j];\r\n      if(board[i][j].status===2) end=board[i][j];\r\n    }\r\n  }\r\n  return {start,end};\r\n};\r\nconst mahattan = (a,b)=>{\r\n  return Math.abs(a.r-b.r)+Math.abs(a.c-b.c);\r\n}\r\nconst d4 = [-1,0,1,0,-1];\r\nconst square4 = (node,board)=>{\r\n  const res = [];\r\n  for(let i=0;i<4;i++){\r\n    const dr = node.r + d4[i];\r\n    const dc = node.c + d4[i+1];\r\n    if(dr>=0&&dc>=0&&dr<board.length&&dc<board[0].length) res.push(board[dr][dc]);\r\n  }\r\n  return res;\r\n}\r\nconst search=(board,heuristic=mahattan,neighbor=square4)=>{\r\n  const newBoard = board.slice();\r\n  const pq = new PriorityQueue((a,b)=>a.f<b.f);\r\n  const {start,end} = _reset(newBoard);\r\n  start.h=heuristic(start,end);\r\n  start.f=start.h;\r\n  // console.log(newBoard)\r\n  pq.push({r:start.r,c:start.c,f:start.h});\r\n  while(pq.size()>0){\r\n    const {r,c,f} = pq.pop();\r\n    console.log(r,c,f);\r\n    const nextNode = newBoard[r][c]; // nextNode: {r,c,f}\r\n    if(nextNode===end){\r\n      pathTo(nextNode).forEach((node)=>node.isPath=true);\r\n      return newBoard;\r\n    } \r\n    if(!nextNode.closed){\r\n      nextNode.closed=true;\r\n      neighbor(nextNode,newBoard).forEach((node)=>{\r\n        if(!node.closed && !node.isWall){\r\n          if(node.visited && nextNode.g + node.weight < node.g){\r\n            node.parent = nextNode;\r\n            node.g = nextNode.g + nextNode.weight;\r\n            node.f = node.g + node.h;\r\n            pq.push({r:node.r,c:node.c,f:node.f});\r\n          } else if(!node.visited){\r\n            node.parent=nextNode;\r\n            node.g = nextNode.g + node.weight;\r\n            node.h = heuristic(node,end);\r\n            node.visited = true;\r\n            node.f = node.g + node.h;\r\n            pq.push({r:node.r,c:node.c,f:node.f});\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n  return newBoard;\r\n}\r\n\r\n\r\nexport {astar as default, Graph, search}\r\n","import {useEffect, useState} from 'react';\r\nimport Node from './Node';\r\n\r\nimport aStar,{Graph,search} from '../../algorithms/Astar';\r\nimport \"./Board.css\";\r\nexport default function Board(props){\r\n  const {boardSize,heuristic,start,setStart} = props;\r\n  const [board,setBoard] = useState([]);\r\n  const [mousePress,setMousePress] =  useState(0);\r\n  let [nodePress,setNodePress] = useState(null);\r\n  useEffect(()=>{\r\n    setBoard(gridGenerator(boardSize[0],boardSize[1]));\r\n  },[boardSize]);\r\n  useEffect(()=>{\r\n    if(start){\r\n      setBoard(search(board));\r\n      setStart(false);\r\n    }\r\n  },[start,board]);\r\n  const rightClick=(event,row,col)=>{\r\n    event.preventDefault();\r\n    // setBoard(wallToggle(board,row,col));\r\n  }\r\n  const onMouseDown = (event,row, col) => {\r\n    event.preventDefault();\r\n    if(board[row][col].status!==0){//special node\r\n      setNodePress ([row,col]);\r\n      setMousePress(event.buttons);\r\n    } else {\r\n      switch(event.buttons){\r\n        case 2://leftmouse press\r\n          setMousePress(2);\r\n          setBoard(wallToggle(board,row,col));\r\n          break;\r\n        case 1://rightmouse press\r\n          setMousePress(1);\r\n          setBoard(weightChange(board,row,col));\r\n          break;\r\n        default:\r\n      }  \r\n    }\r\n    setStart(true);\r\n      \r\n  }\r\n\r\n  const onMouseEnter = (event,row, col) => {\r\n    event.preventDefault();\r\n    if(nodePress!==null){ //special node\r\n      if(board[row][col].status===0&&mousePress!==0){\r\n        setBoard(moveSpecialNode(board,nodePress[0],nodePress[1],row,col));\r\n        setNodePress([row,col]);\r\n        setStart(true);\r\n      }\r\n    }else if (mousePress===2){\r\n      setBoard(wallToggle(board,row,col));\r\n      setStart(true);\r\n    } else if(mousePress===1){\r\n      setBoard(weightChange(board,row,col));\r\n      setStart(true);\r\n    }\r\n  }\r\n\r\n  const onMouseUp = (event) => {\r\n    event.preventDefault();\r\n    setMousePress(0);\r\n    setNodePress(null);\r\n  }\r\n\r\n  return (\r\n    <table>\r\n    <tbody>\r\n    {board.map((row,rid)=>{\r\n      return (\r\n        <tr key={rid} className=\"row\">\r\n          {row.map((node,nid)=>{\r\n            return(\r\n              <Node\r\n                key={nid}\r\n                nodeInfo={node}\r\n                onRightClick={rightClick}\r\n                onMouseDown={onMouseDown}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseUp={onMouseUp}\r\n              />\r\n            ) \r\n          })}\r\n        </tr>\r\n      )\r\n    })\r\n    }\r\n    </tbody>\r\n    </table>\r\n  )\r\n  \r\n}\r\n\r\nconst moveSpecialNode = (board,prevRow,prevCol,newRow,newCol) => {\r\n  const newBoard = board.slice();\r\n  const status = board[prevRow][prevCol].status;\r\n  newBoard[prevRow][prevCol] = {\r\n    ...board[prevRow][prevCol],\r\n    status:0,\r\n  }\r\n  newBoard[newRow][newCol] = {\r\n    ...board[newRow][newCol],\r\n    status:status,\r\n  }\r\n  return newBoard;\r\n}\r\nconst gridGenerator = (row,col) => {\r\n  const grid = [];\r\n  for(let i=0;i<row;i++){\r\n    const row = [];\r\n    for(let j=0;j<col;j++){\r\n      row.push(nodeGenerator(i,j));\r\n    }\r\n    grid.push(row);\r\n  }\r\n  grid[0][0].status=1;\r\n  grid[grid.length-1][grid[0].length-1].status=2;\r\n  return grid;\r\n}\r\n/*\r\nnode status:\r\n0: normal\r\n1: start\r\n2: end\r\n3: side-quest\r\n\r\n*/\r\nconst nodeGenerator = (row,col) => {\r\n  return {\r\n    row,col,\r\n    weight:1,\r\n    status:0,\r\n  }\r\n}\r\n\r\nconst weightChange = (board,row,col) => {\r\n  const newBoard = board.slice();\r\n  const oldNode = newBoard[row][col];\r\n  newBoard[row][col] = {\r\n    ...oldNode,\r\n    weight: (oldNode.weight+1)%16,\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nconst wallToggle = (board,row,col) => {\r\n  const newBoard = board.slice();\r\n  const oldNode = newBoard[row][col];\r\n  newBoard[row][col] = {\r\n    ...oldNode,\r\n    weight:oldNode.weight===15?1:15,\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nconst getShortestPath = (board,start,end)=>{\r\n\r\n}\r\n\r\n","import { Button } from '@material-ui/core';\r\nimport Slider from '@material-ui/core/Slider'\r\nimport styled  from 'styled-components';\r\n\r\nexport default function Tooltip(props){\r\n  const {boardSize,setBoardSize,heuristic,setHeuristic,setStart} = props;\r\n  return(\r\n    <TooltipWrapper>\r\n      <Row>\r\n        Row   \r\n        <RowSlider\r\n        aria-label=\"Column\"\r\n        max={20}\r\n        min={5}\r\n        marks\r\n        step={1}\r\n        value={boardSize[0]}\r\n        onChange={(event,value)=>setBoardSize([value,boardSize[1]])}\r\n        valueLabelDisplay=\"auto\"\r\n        component=\"span\"\r\n        />\r\n      </Row>\r\n      <Row>\r\n        Column\r\n        <RowSlider\r\n        aria-label=\"Column\"\r\n        max={20}\r\n        min={5}\r\n        marks\r\n        step={1}\r\n        value={boardSize[1]}\r\n        onChange={(event,value)=>setBoardSize([boardSize[0],value])}\r\n        valueLabelDisplay=\"auto\"\r\n        component=\"span\"\r\n        />\r\n      </Row>\r\n    <Button variant=\"contained\" onClick={()=>setStart(true)}>Start</Button>\r\n    <Button variant=\"contained\" onClick={()=>setBoardSize([...boardSize])}>Reset</Button>\r\n\r\n    </TooltipWrapper>\r\n  )\r\n}\r\nconst TooltipWrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:521px;\r\n`\r\nconst Row = styled.div`\r\n\r\n  display:flex;\r\n  justify-content:space-between;\r\n`\r\nconst RowSlider = styled(Slider)`\r\n  &&{\r\n    width: 300px;\r\n  }\r\n`\r\n","import { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport Tooltip from './Tooltip'\r\nimport styled from \"styled-components\"\r\nexport default function Playground(){\r\n  const [boardSize,setBoardSize] = useState([15,15]);\r\n  const [heuristic,setHeuristic] = useState(\"manhattan\");\r\n  const [start,setStart] = useState(false);\r\n  return(\r\n    <Wrapper>\r\n      <Tooltip\r\n        boardSize={boardSize} \r\n        setBoardSize={setBoardSize}\r\n        heuristic={heuristic}\r\n        setHeuristic={setHeuristic}\r\n        start={start}\r\n        setStart={setStart}\r\n\r\n      />\r\n      <StyledBoard\r\n        start={start}\r\n        setStart={setStart}\r\n        boardSize={boardSize}\r\n        heuristic={heuristic}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n display:flex;\r\n flex-direction:column;\r\n align-items:center;\r\n`\r\nconst StyledBoard = styled(Board)`\r\n  width:521px;\r\n  height:521px;\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        A star\r\n        <br />\r\n        PLAYGROUND\r\n      </IntroText>\r\n      <StyledButton onClick={()=>setChapterStage(1)}>\r\n        Start\r\n        <KeyboardArrowRightIcon fontSize=\"small\" />\r\n      </StyledButton>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n`\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  width:300px;\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';export default function Forward(props){\r\n  const {onClick} = props;\r\n  return(\r\n    <StyledButton onClick={onClick}>\r\n      Back\r\n      <KeyboardArrowLeftIcon size=\"small\" />\r\n    </StyledButton>\r\n  )\r\n}\r\nconst StyledButton = styled(Button)`\r\n  && {\r\n    width:300px;\r\n    margin:30px;\r\n  }\r\n`","import styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nexport default function Forward(props){\r\n  const {onClick} = props;\r\n  return(\r\n    <StyledButton onClick={onClick}>\r\n      Next\r\n      <KeyboardArrowRightIcon size=\"small\" />\r\n    </StyledButton>\r\n  )\r\n}\r\nconst StyledButton = styled(Button)`\r\n  && {\r\n    width:300px;\r\n    margin:30px;\r\n  }\r\n`","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <Text>\r\n      Movement for a single object seems easy.\r\n      <br />Pathfinding is complex.\r\n      <br />Why bother with pathfinding? \r\n      </Text>\r\n      <Text>\r\n        - Shortest path\r\n        <br />- Time efficiency\r\n      </Text>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(0)}/>\r\n        <Forward onClick={()=>setChapterStage(2)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\n\r\n","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen00(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <Text>\r\n        Pathfinding algorithms works with Graph\r\n        <br />an abstract mathematic definition\r\n        <br />contains vertices (location) and edges (connections)\r\n      </Text>\r\n      <Text>\r\n        For simplicity and visualization purpose, Grid is used\r\n        <br />Playground is interactive:\r\n        <br />- Nodes can be dragged around\r\n        <br />- Leftclick/press to add weight\r\n        <br />- Rightclick/press to toggle wall\r\n      </Text>\r\n      <Text>\r\n        Board example placeholder\r\n        <br />Map representation placeholder\r\n      </Text>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(1)}/>\r\n        <Forward onClick={()=>setChapterStage(3)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\n\r\n","import {useState} from 'react'\r\nimport Screen00 from './Screen00'\r\nimport Screen01 from './Screen01'\r\nimport Screen02 from './Screen02'\r\nexport default function Chapter0(props){\r\n  const {setStage} = props;\r\n  const [chapterStage,setChapterStage] = useState(0);\r\n  switch(chapterStage){\r\n    case 0:\r\n      return (<Screen00 setChapterStage={setChapterStage}/>);     \r\n    case 1:\r\n      return (<Screen01 setChapterStage={setChapterStage}/>);     \r\n    case 2:\r\n      return (<Screen02 setChapterStage={setChapterStage}/>);     \r\n    default:\r\n      setStage(1);\r\n      return null;\r\n  }\r\n}\r\n","import styled from \"styled-components\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen10(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        Chapter 1:\r\n        <br />\r\n        Pathfinding algorithms\r\n      </IntroText>\r\n      <Text>\r\n        This chapter covers basic algorithms for pathfinding:\r\n        <br />- Dijkstra\r\n        <br />- Heuristic\r\n        <br />- A*\r\n      </Text>\r\n      <Text>\r\n        Assumption:\r\n        <br />- Each node on the grid has a positive weight represent the cost to move through it\r\n        <br />- The goal is to find the smallest cost path\r\n      </Text>\r\n        <Forward onClick={()=>setChapterStage(1)}/>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\n","import styled from \"styled-components\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Backward from \"../Navigation/Backward\"\r\nimport Forward from \"../Navigation/Forward\"\r\nexport default function Screen11(props){\r\n  const {setChapterStage} = props;\r\n  return(\r\n    <Wrapper>\r\n      <IntroText>\r\n        Dijsktra\r\n        <br />\r\n        Uniform Cost Search\r\n      </IntroText>\r\n      <Grid container direction=\"row\">\r\n        <Text>\r\n          \r\n        </Text>\r\n      </Grid>\r\n      <BottomGrid container justify=\"space-between\" direction=\"row\">\r\n        <Backward onClick={()=>setChapterStage(1)}/>\r\n        <Forward onClick={()=>setChapterStage(3)}/>\r\n      </BottomGrid>\r\n    </Wrapper>\r\n  )\r\n}\r\nconst Wrapper = styled.div`\r\n  display:flex;\r\n  flex-direction:column;\r\n  width:100%;\r\n  align-items:center;\r\n`\r\nconst Text = styled.p`\r\n  font-size:24px;\r\n  width:60%;\r\n`\r\nconst BottomGrid = styled(Grid)`\r\n  && {\r\n    margin-top:auto;\r\n    margin-bottom:72px;\r\n  }\r\n`\r\n\r\nconst IntroText = styled.h1`\r\n  text-align:center;\r\n`\r\n","import {useState} from 'react'\r\nimport Screen10 from './Screen10'\r\nimport Screen11 from './Screen11'\r\nimport Screen12 from './Screen12'\r\nexport default function Chapter1(props){\r\n  const {setStage} = props;\r\n  const [chapterStage,setChapterStage] = useState(0);\r\n  switch(chapterStage){\r\n    case 0:\r\n      return (<Screen10 setChapterStage={setChapterStage}/>);     \r\n    case 1:\r\n      return (<Screen11 setChapterStage={setChapterStage}/>);     \r\n    case 2:\r\n      return (<Screen12 setChapterStage={setChapterStage}/>);     \r\n    default:\r\n      setStage(2);\r\n      return null;\r\n  }\r\n}\r\n","\r\n/*\r\n<StyledNavigation value={stage} onChange={(event,value)=>setStage(value)}>\r\n      <BottomNavigationAction label=\"Recents\" value={0}  icon={<RestoreIcon />}/>\r\n      <BottomNavigationAction label=\"Favorites\" value={1} icon={<RestoreIcon />} />\r\n      <BottomNavigationAction label=\"Nearby\" value=\"nearby\"  />\r\n      <BottomNavigationAction label=\"Folder\" value=\"folder\" />\r\n    </StyledNavigation>\r\n*/\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport styled from 'styled-components'\r\n\r\nexport default function Navigation(props){\r\n  const {stage,setStage} = props;\r\n  return (\r\n    <StyleDiv>\r\n      <StyledTooltip title=\"Chapter 0: Introduction\" onClick={()=>setStage(0)}>\r\n        <Fab color=\"primary\" size=\"small\">\r\n          0\r\n        </Fab>\r\n      </StyledTooltip>\r\n      <StyledTooltip title=\"Chapter 1: Pathfinding Algorithm\" onClick={()=>setStage(1)}>\r\n        <Fab color=\"primary\" size=\"small\">\r\n          1\r\n        </Fab>\r\n      </StyledTooltip>\r\n      <StyledTooltip title=\"Chapter 2: Heuristic\" onClick={()=>setStage(2)}>\r\n        <Fab color=\"primary\" size=\"small\">\r\n          2\r\n        </Fab>\r\n      </StyledTooltip>\r\n      <StyledTooltip title=\"Chapter 3: Breaking tie\" onClick={()=>setStage(3)}>\r\n        <Fab color=\"primary\" size=\"small\">\r\n          3\r\n        </Fab>\r\n      </StyledTooltip>\r\n      <StyledTooltip title=\"Chapter 4: Playground\" onClick={()=>setStage(4)}>\r\n        <Fab color=\"primary\" size=\"small\">\r\n          4\r\n        </Fab>\r\n      </StyledTooltip>\r\n    </StyleDiv>\r\n  )\r\n}\r\nconst StyledTooltip = styled(Tooltip)`\r\n  && {\r\n    margin: 8px;\r\n  }\r\n`\r\nconst StyleFab = styled(Fab)`\r\n`\r\nconst StyleDiv  = styled.div`\r\n  width:100%;\r\n  padding:12px;\r\n  background:#333;\r\n  position:absolute;\r\n  bottom:0;\r\n  justify-content:center;\r\n  display:flex;\r\n`","import {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Playground from './Playground/Playground'\r\nimport Chapter0 from './Chapter0/Chapter0'\r\nimport Chapter1 from './Chapter1/Chapter1'\r\nimport Navigation from './Navigation/Navigation'\r\nexport default function Main() {\r\n  const [stage,setStage] = useState(0);\r\n  return (\r\n    <FontFormat>\r\n    {\r\n      stage===0?<Chapter0 setStage={setStage}/>\r\n      :stage===1?<Chapter1 setStage={setStage}/>\r\n      :stage===4?<Playground />\r\n      :null\r\n    }\r\n    <Navigation setStage={setStage}  stage={stage}/>\r\n    </FontFormat>\r\n\r\n  );\r\n}\r\nconst FontFormat = styled.div`\r\n  font-size:20px;\r\n  display:flex;\r\n  justify-content:center;\r\n  font-family:'Futura Handwritten';\r\n`\r\n\r\n","export default __webpack_public_path__ + \"static/media/FuturaHandwritten.dbaf4545.ttf\";","import { createGlobalStyle } from 'styled-components'\r\nimport FuturaHandwritten from './FuturaHandwritten.ttf'\r\nexport default createGlobalStyle`\r\n  @font-face {\r\n    font-family: 'Futura Handwritten';\r\n    src: url(${FuturaHandwritten}) format('truetype'),\r\n    local('Futura Handwritten');\r\n    font-weight: 300;\r\n    font-style: normal;\r\n  }\r\n`;","import Main from './components/Main'\r\nimport GlobalFonts from './fonts/fonts'\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    button:{\r\n      textTransform:\"none\",\r\n    },\r\n    fontSize:24,\r\n    fontFamily: [\r\n      'Chilanka',\r\n      'cursive',\r\n    ].join(','),\r\n  },});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalFonts />\r\n      <Main />\r\n    </ThemeProvider>\r\n    \r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}